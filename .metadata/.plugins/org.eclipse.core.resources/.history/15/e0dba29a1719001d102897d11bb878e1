package test.com.member;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class MemberDAOimpl implements MemberDAO {

	// 전역변수 공간으로 자동으로 null로 초기화 해준다.
	private Connection conn;
	private PreparedStatement pstmt;
	private ResultSet rs;
	
	// sql에는 SQL_Shell에서 사용하는 키워드를 입력한다.

	public MemberDAOimpl() {
		System.out.println("MemberDAOimpl()..");
		try { // Connection 전에만 동작하면 되기때문에 impl에 옮긴다.
			Class.forName(MemberDB_postgres.DRIVER_NAME);
			System.out.println("Driver successed...");

			jdbcConnectionTest();

		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}

	// table 내의 데이터를 검색 : DQL(Data Query Language)
	private void jdbcConnectionTest() {

		try {
			conn = DriverManager.getConnection(MemberDB_postgres.URL, MemberDB_postgres.USER,
					MemberDB_postgres.PASSWORD);
//			System.out.println("conn successed...");
			// table 내의 데이터를 검색 : DQL(Data Query Language)
			String sql = "select version() as version";
			// ctrl + shift + x : 소문자 → 대문자로 변환
			// ctrl + shift + y : 대문자 → 소문자로 변환
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();

			while (rs.next()) {
				System.out.println(rs.getString("version"));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (conn != null) {
				try {
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		} // end finally
	}

	// DML
	@Override
	public int insert(MemberVO vo) {
		System.out.println("insert()...");
		System.out.println(vo);
		Connection conn = null;
		PreparedStatement pstmt = null;
		int flag = 0;

		try {
			conn = DriverManager.getConnection(MemberDB_postgres.URL, MemberDB_postgres.USER,
					MemberDB_postgres.PASSWORD);
//			System.out.println("conn successed...");

			pstmt = conn.prepareStatement(MemberDB_postgres.SQL_INSERT);
			pstmt.setString(1, vo.getId());
			pstmt.setString(2, vo.getPw());
			pstmt.setString(3, vo.getName());
			pstmt.setString(4, vo.getTel());
			flag = pstmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (conn != null) {
				try {
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		} // end finally
		return flag;
	}

	private int executeFileOutput(List<MemberVO> vos) {
		int flag = 0;
		String path = "member.db";
		File file = new File(path);
		FileOutputStream fos = null;
		ObjectOutputStream oos = null;
		try {
			fos = new FileOutputStream(file);
			oos = new ObjectOutputStream(fos);

			oos.writeObject(vos);

			oos.flush();
			System.out.println("oos successed...");
			flag = 1;
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (oos != null) {
				try {
					oos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (fos != null) {
				try {
					fos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return flag;
	}

	@Override
	public int update(MemberVO vo) {
		System.out.println("update()...");
		System.out.println(vo);

		int flag = 0;
		return flag;
	}

	@Override
	public int delete(MemberVO vo) {
		System.out.println("delete()...");
		System.out.println(vo);
		int flag = 0;
		return flag;
	}

	@Override
	public List<MemberVO> selectAll() {
		System.out.println("selectAll()...");

		List<MemberVO> vos = new ArrayList<MemberVO>();

		try {
			conn = DriverManager.getConnection(MemberDB_postgres.URL, MemberDB_postgres.USER,
					MemberDB_postgres.PASSWORD);
//			System.out.println("conn successed...");

			pstmt = conn.prepareStatement(MemberDB_postgres.SQL_SELECT_ALL);
			rs = pstmt.executeQuery();

			while (rs.next()) {
				MemberVO vo = new MemberVO();
				vo.setNum(rs.getInt("num"));
				vo.setId(rs.getString("id"));
				vo.setPw(rs.getString("pw"));
				vo.setName(rs.getString("name"));
				vo.setTel(rs.getString("tel"));
				vos.add(vo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (conn != null) {
				try {
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		} // end finally

		return vos;
	}

	@SuppressWarnings("unchecked")
	private List<MemberVO> executeFileInput() {
		String path = "member.db";
		File file = new File(path);
		FileInputStream fos = null;
		ObjectInputStream ois = null;
		List<MemberVO> vos = null;
		try {
			fos = new FileInputStream(file);
			ois = new ObjectInputStream(fos);
			vos = (List<MemberVO>) ois.readObject();

			System.out.println("ois successed...");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} finally {
			if (ois != null) {
				try {
					ois.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (fos != null) {
				try {
					fos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return vos;
	}

	@Override
	public MemberVO selectOne(MemberVO vo) {
		System.out.println("selectOne()...");
		System.out.println(vo);

		MemberVO vo2 = new MemberVO();
		vo2.setNum(77);
		vo2.setId("admin77");
		vo2.setPw("hi123477");
		vo2.setName("kim77");
		vo2.setTel("0277");
		return vo2;
	}

	@Override
	public List<MemberVO> searchList(String searchKey, String searchWord) {
		System.out.println("searchList()...");
		System.out.println(searchKey);
		System.out.println(searchWord);

		List<MemberVO> vos = new ArrayList<MemberVO>();

		for (int i = 0; i < 4; i++) {
			MemberVO vo = new MemberVO();
			vo.setNum(55 + i);
			vo.setId("admin55" + i);
			vo.setPw("hi1234555" + i);
			vo.setName("kim55" + i);
			vo.setTel("055" + i);
			vos.add(vo);
		}

		return vos;
	}

}
