package test.com.empoyee;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

public class EmployeeDAOimpl implements EmployeeDAO {

	private Connection conn;
	private PreparedStatement pstmt;
	private ResultSet rs;
	
	public EmployeeDAOimpl() {
		try {
			Class.forName(EmployeeDB_postgres.DRIVER_NAME);
			System.out.println("driver successed");
			
//			jdbcConnectionTest();
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	private void jdbcConnectionTest() {
		try {
			conn = DriverManager.getConnection(EmployeeDB_postgres.URL, EmployeeDB_postgres.USER, EmployeeDB_postgres.PASSWORD);
			String sql = "select version() as version";
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			while (rs.next() ) {
				System.out.println(rs.getString("version"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (rs!=null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (pstmt!=null) {
				try {
					pstmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (conn!=null) {
				try {
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	@Override
	public int insert(EmployeeVO vo) {
//		System.out.println("insert");
		System.out.println(vo);
		int flag = 0;
		try {
			conn = DriverManager.getConnection(EmployeeDB_postgres.URL, EmployeeDB_postgres.USER, EmployeeDB_postgres.PASSWORD);
			pstmt = conn.prepareStatement(EmployeeDB_postgres.INSERT);
			pstmt.setString(1, vo.getFirst_name());
			pstmt.setString(2, vo.getLast_name());
			pstmt.setString(3, vo.getEmail());
			pstmt.setInt(4, vo.getSalary());
			flag = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if(pstmt!=null) {
				try {
					pstmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if(conn!=null) {
				try {
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return flag;
	}

	@Override
	public int update(EmployeeVO vo) {
//		System.out.println("update");
		System.out.println(vo);
		int flag = 0;
		try {
			conn = DriverManager.getConnection(EmployeeDB_postgres.URL, EmployeeDB_postgres.USER, EmployeeDB_postgres.PASSWORD);
			pstmt = conn.prepareStatement(EmployeeDB_postgres.UPDATE);
			pstmt.setString(1, vo.getFirst_name());
			pstmt.setString(2, vo.getLast_name());
			pstmt.setString(3, vo.getEmail());
			pstmt.setInt(4, vo.getSalary());
			pstmt.setInt(5, vo.getNum());
			flag = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if(pstmt!=null) {
				try {
					pstmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if(conn!=null) {
				try {
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return flag;
	}

	@Override
	public int delete(EmployeeVO vo) {
//		System.out.println("delete");
		System.out.println(vo);
		int flag = 0;
		try {
			conn = DriverManager.getConnection(EmployeeDB_postgres.URL, EmployeeDB_postgres.USER, EmployeeDB_postgres.PASSWORD);
			pstmt = conn.prepareStatement(EmployeeDB_postgres.DELETE);
			pstmt.setInt(1, vo.getNum());
			flag = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if(pstmt!=null) {
				try {
					pstmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if(conn!=null) {
				try {
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return flag;
	}

	@Override
	public EmployeeVO selectOne(EmployeeVO vo) {
//		System.out.println("selectOne");
//		System.out.println(vo);
		EmployeeVO vo2 = new EmployeeVO();
		try {
			conn = DriverManager.getConnection(EmployeeDB_postgres.URL, EmployeeDB_postgres.USER, EmployeeDB_postgres.PASSWORD);
			pstmt = conn.prepareStatement(EmployeeDB_postgres.SELECT_ONE);
			pstmt.setInt(1, vo.getNum());
			rs = pstmt.executeQuery();
			
			while (rs.next()) {
				vo2.setNum(rs.getInt("num"));
				vo2.setFirst_name(rs.getString("first_name"));
				vo2.setLast_name(rs.getString("last_name"));
				vo2.setEmail(rs.getString("email"));
				vo2.setSalary(rs.getInt("salary"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if(pstmt!=null) {
				try {
					pstmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if(conn!=null) {
				try {
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return vo2;
	}

	@Override
	public List<EmployeeVO> selectAll() {
		System.out.println("selectAll");
		return null;
	}

	@Override
	public List<EmployeeVO> searchList(String searchKey, String SearchWord) {
		System.out.println("searchList");
		return null;
	}

}
