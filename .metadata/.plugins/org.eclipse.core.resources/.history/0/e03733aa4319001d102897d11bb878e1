package test.com.board;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import test.com.member.MemberDB_postgres;

public class BoardDAOimpl implements BoardDAO {

	private Connection conn;
	private PreparedStatement pstmt;
	private ResultSet rs;
	
	@Override
	public int input(BoardVO vo) {
		System.out.println("input");
		// 1. DRIVER에 접속
		try {
			Class.forName(BoardDB_postgres.DRIVER_NAME);
			System.out.println("Driver successed...");

			jdbcConnectionTest();

		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		return 0;
	}
	
	// 2. jdbcConnectionTest() 생성
	private void jdbcConnectionTest() {
		// 변수는 전역변수로 선언
		
		try {
			conn = DriverManager.getConnection(MemberDB_postgres.URL, MemberDB_postgres.USER,
					MemberDB_postgres.PASSWORD);
			String sql = "select version() as version";
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();

			while (rs.next()) {
				System.out.println(rs.getString("version"));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (conn != null) {
				try {
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		} // end finally
	}

	@Override
	public int update(BoardVO vo) {
		System.out.println("update");
		System.out.println(vo);
		return 1;
	}

	@Override
	public int delete(BoardVO vo) {
		System.out.println("delete");
		System.out.println(vo);
		return 2;
	}

	@Override
	public BoardVO searchOne(BoardVO vo) {
		System.out.println("searchOne");
		return vo;
	}

	@Override
	public List<BoardVO> searchAll() {
		System.out.println("searchAll");
		List<BoardVO> list = new ArrayList<BoardVO>();
		for (int i = 0; i < 3; i++) {
			BoardVO vo = new BoardVO();
			vo.setNum(i+1);
			vo.setTitle("title" + (i+1));
			vo.setContent("java" + (i+1));
			vo.setWriter("lee" + (i+1));
			list.add(vo);
		}
		return list;
	}

	@Override
	public List<BoardVO> searchList(String title_name, String content_name, String writer_name) {
		System.out.println("searchList");
		List<BoardVO> list = new ArrayList<BoardVO>();
		for (int i = 0; i < 3; i++) {
			BoardVO vo = new BoardVO();
			vo.setNum(i+1);
			vo.setTitle(title_name + (i+1));
			vo.setContent(content_name + (i+1));
			vo.setWriter(writer_name + (i+1));
			list.add(vo);
		}
		return list;
	}

	@Override
	public Map<Integer, BoardVO> test() {
		System.out.println("test");
		Map<Integer, BoardVO> m = new HashMap<Integer, BoardVO>();
		for (int i = 0; i < 4; i++) {
			BoardVO vo = new BoardVO();
			vo.setNum(i+1);
			vo.setTitle("title" + (i+1));
			vo.setContent("java" + (i+1));
			vo.setWriter("lee" + (i+1));
			m.put(i, vo);
		}
		return m;
	}



}
